'solc --version' running
'solc ./arithmatic-smart-contract-testcases\IO75.sol --combined-json abi,ast,bin,bin-runtime,srcmap,srcmap-runtime,userdoc,devdoc,hashes,compact-format --allow-paths .,C:\Users\lsandula\Downloads\slither\arithmatic-smart-contract-testcases' running
INFO:Detectors:

Constant overflow in IntegerOverflowUnderflowTest.mulOverflow at line 16
Operation: RETURN a * b
Consider using SafeMath or ensure values fit within declared types.
Constant underflow in IntegerOverflowUnderflowTest.subUnderflow at line 23
Operation: RETURN a - b
Consider using SafeMath or ensure values fit within declared types.
Constant overflow in IntegerOverflowUnderflowTest.addOverflow at line 30
Operation: RETURN a + b
Consider using SafeMath or ensure values fit within declared types.
Potential constant overflow/underflow in IntegerOverflowUnderflowTest.complexExprOverflow at line 36
Operation: RETURN (a * 10) + 10
Consider using SafeMath or require statements to ensure values fit within declared types.
Constant overflow in IntegerOverflowUnderflowTest.shiftOverflow at line 42
Operation: RETURN a << 8
Consider using SafeMath or ensure values fit within declared types.
Constant overflow in IntegerOverflowUnderflowTest.powerOverflow at line 48
Operation: RETURN a ** 3
Consider using SafeMath or ensure values fit within declared types.
Constant overflow in IntegerOverflowUnderflowTest.bitwiseNot at line 61
Operation: NEW VARIABLE b = a + 1
Consider using SafeMath or ensure values fit within declared types.
Constant overflow in IntegerOverflowUnderflowTest.castOverflow at line 68
Operation: RETURN uint8(a)
Consider using SafeMath or ensure values fit within declared types.
Potential constant overflow/underflow in IntegerOverflowUnderflowTest.safeAdd at line 80
Operation: RETURN a + b
Consider using SafeMath or require statements to ensure values fit within declared types.
Potential constant overflow/underflow in IntegerOverflowUnderflowTest.safeSub at line 87
Operation: RETURN a - b
Consider using SafeMath or require statements to ensure values fit within declared types.
Potential constant overflow/underflow in IntegerOverflowUnderflowTest.safePower at line 93
Operation: RETURN a ** 2
Consider using SafeMath or require statements to ensure values fit within declared types.
Potential constant overflow/underflow in IntegerOverflowUnderflowTest.safeCast at line 99
Operation: RETURN uint8(a)
Consider using SafeMath or require statements to ensure values fit within declared types.
Potential constant overflow/underflow in IntegerOverflowUnderflowTest.safeIntermediate at line 105
Operation: NEW VARIABLE temp = uint16(a) * 1000
Consider using SafeMath or require statements to ensure values fit within declared types.
Potential constant overflow/underflow in IntegerOverflowUnderflowTest.safeIntermediate at line 106
Operation: RETURN uint8(temp / 1000)
Consider using SafeMath or require statements to ensure values fit within declared types.
Potential constant overflow/underflow in IntegerOverflowUnderflowTest.safeUnaryMinus at line 112
Operation: RETURN - a
Consider using SafeMath or require statements to ensure values fit within declared types.
Constant underflow in IntegerOverflowUnderflowTest.safeBitwiseNot at line 118
Operation: RETURN ~ a
Consider using SafeMath or ensure values fit within declared types.
Potential constant overflow/underflow in IntegerOverflowUnderflowTest.safeBitwiseNotsigned at line 122
Operation: RETURN ~ a
Consider using SafeMath or require statements to ensure values fit within declared types.Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#integer-overflow-underflow
INFO:Slither:./arithmatic-smart-contract-testcases\IO75.sol analyzed (1 contracts with 1 detectors), 17 result(s) found
